#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QLHD.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLHD")]
	public partial class dbQLHDDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventStudentList(EventStudentList instance);
    partial void UpdateEventStudentList(EventStudentList instance);
    partial void DeleteEventStudentList(EventStudentList instance);
    partial void InsertEventType(EventType instance);
    partial void UpdateEventType(EventType instance);
    partial void DeleteEventType(EventType instance);
    partial void InsertFalcuty(Falcuty instance);
    partial void UpdateFalcuty(Falcuty instance);
    partial void DeleteFalcuty(Falcuty instance);
    partial void InsertOganizer(Oganizer instance);
    partial void UpdateOganizer(Oganizer instance);
    partial void DeleteOganizer(Oganizer instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertSemester(Semester instance);
    partial void UpdateSemester(Semester instance);
    partial void DeleteSemester(Semester instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStaffAccount(StaffAccount instance);
    partial void UpdateStaffAccount(StaffAccount instance);
    partial void DeleteStaffAccount(StaffAccount instance);
    #endregion
		
		public dbQLHDDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["QLHDConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbQLHDDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbQLHDDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbQLHDDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbQLHDDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Event> Event
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventStudentList> EventStudentLists
		{
			get
			{
				return this.GetTable<EventStudentList>();
			}
		}
		
		public System.Data.Linq.Table<EventType> EventTypes
		{
			get
			{
				return this.GetTable<EventType>();
			}
		}
		
		public System.Data.Linq.Table<Falcuty> Falcuties
		{
			get
			{
				return this.GetTable<Falcuty>();
			}
		}
		
		public System.Data.Linq.Table<Oganizer> Oganizers
		{
			get
			{
				return this.GetTable<Oganizer>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Semester> Semesters
		{
			get
			{
				return this.GetTable<Semester>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<StaffAccount> StaffAccounts
		{
			get
			{
				return this.GetTable<StaffAccount>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _userName;
		
		private string _displayName;
		
		private string _passWord;
		
		private System.Nullable<int> _idPermission;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Permission> _Permission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OndisplayNameChanging(string value);
    partial void OndisplayNameChanged();
    partial void OnpassWordChanging(string value);
    partial void OnpassWordChanged();
    partial void OnidPermissionChanging(System.Nullable<int> value);
    partial void OnidPermissionChanged();
    #endregion
		
		public Account()
		{
			this._Student = default(EntityRef<Student>);
			this._Permission = default(EntityRef<Permission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(11) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_displayName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string displayName
		{
			get
			{
				return this._displayName;
			}
			set
			{
				if ((this._displayName != value))
				{
					this.OndisplayNameChanging(value);
					this.SendPropertyChanging();
					this._displayName = value;
					this.SendPropertyChanged("displayName");
					this.OndisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passWord", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string passWord
		{
			get
			{
				return this._passWord;
			}
			set
			{
				if ((this._passWord != value))
				{
					this.OnpassWordChanging(value);
					this.SendPropertyChanging();
					this._passWord = value;
					this.SendPropertyChanged("passWord");
					this.OnpassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPermission", DbType="Int")]
		public System.Nullable<int> idPermission
		{
			get
			{
				return this._idPermission;
			}
			set
			{
				if ((this._idPermission != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPermissionChanging(value);
					this.SendPropertyChanging();
					this._idPermission = value;
					this.SendPropertyChanged("idPermission");
					this.OnidPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Account", Storage="_Student", ThisKey="userName", OtherKey="idStudent", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._userName = value.idStudent;
					}
					else
					{
						this._userName = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_Account", Storage="_Permission", ThisKey="idPermission", OtherKey="idPermission", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._idPermission = value.idPermission;
					}
					else
					{
						this._idPermission = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _idStudent;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _dob;
		
		private int _idClass;
		
		private int _idCourse;
		
		private System.Nullable<bool> _idType;
		
		private int _idFalcuty;
		
		private string _andress;
		
		private string _email;
		
		private string _phone;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<EventStudentList> _EventStudentLists;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Falcuty> _Falcuty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidStudentChanging(string value);
    partial void OnidStudentChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndobChanging(System.Nullable<System.DateTime> value);
    partial void OndobChanged();
    partial void OnidClassChanging(int value);
    partial void OnidClassChanged();
    partial void OnidCourseChanging(int value);
    partial void OnidCourseChanged();
    partial void OnidTypeChanging(System.Nullable<bool> value);
    partial void OnidTypeChanged();
    partial void OnidFalcutyChanging(int value);
    partial void OnidFalcutyChanged();
    partial void OnandressChanging(string value);
    partial void OnandressChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    #endregion
		
		public Student()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._EventStudentLists = new EntitySet<EventStudentList>(new Action<EventStudentList>(this.attach_EventStudentLists), new Action<EventStudentList>(this.detach_EventStudentLists));
			this._Class = default(EntityRef<Class>);
			this._Course = default(EntityRef<Course>);
			this._Falcuty = default(EntityRef<Falcuty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStudent", DbType="NVarChar(11) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string idStudent
		{
			get
			{
				return this._idStudent;
			}
			set
			{
				if ((this._idStudent != value))
				{
					this.OnidStudentChanging(value);
					this.SendPropertyChanging();
					this._idStudent = value;
					this.SendPropertyChanged("idStudent");
					this.OnidStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dob", DbType="Date")]
		public System.Nullable<System.DateTime> dob
		{
			get
			{
				return this._dob;
			}
			set
			{
				if ((this._dob != value))
				{
					this.OndobChanging(value);
					this.SendPropertyChanging();
					this._dob = value;
					this.SendPropertyChanged("dob");
					this.OndobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClass", DbType="Int NOT NULL")]
		public int idClass
		{
			get
			{
				return this._idClass;
			}
			set
			{
				if ((this._idClass != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidClassChanging(value);
					this.SendPropertyChanging();
					this._idClass = value;
					this.SendPropertyChanged("idClass");
					this.OnidClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCourse", DbType="Int NOT NULL")]
		public int idCourse
		{
			get
			{
				return this._idCourse;
			}
			set
			{
				if ((this._idCourse != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidCourseChanging(value);
					this.SendPropertyChanging();
					this._idCourse = value;
					this.SendPropertyChanged("idCourse");
					this.OnidCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idType", DbType="Bit")]
		public System.Nullable<bool> idType
		{
			get
			{
				return this._idType;
			}
			set
			{
				if ((this._idType != value))
				{
					this.OnidTypeChanging(value);
					this.SendPropertyChanging();
					this._idType = value;
					this.SendPropertyChanged("idType");
					this.OnidTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFalcuty", DbType="Int NOT NULL")]
		public int idFalcuty
		{
			get
			{
				return this._idFalcuty;
			}
			set
			{
				if ((this._idFalcuty != value))
				{
					if (this._Falcuty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidFalcutyChanging(value);
					this.SendPropertyChanging();
					this._idFalcuty = value;
					this.SendPropertyChanged("idFalcuty");
					this.OnidFalcutyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_andress", DbType="NVarChar(100)")]
		public string andress
		{
			get
			{
				return this._andress;
			}
			set
			{
				if ((this._andress != value))
				{
					this.OnandressChanging(value);
					this.SendPropertyChanging();
					this._andress = value;
					this.SendPropertyChanged("andress");
					this.OnandressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(30)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NVarChar(20)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Account", Storage="_Accounts", ThisKey="idStudent", OtherKey="userName")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_EventStudentList", Storage="_EventStudentLists", ThisKey="idStudent", OtherKey="idStudent")]
		public EntitySet<EventStudentList> EventStudentLists
		{
			get
			{
				return this._EventStudentLists;
			}
			set
			{
				this._EventStudentLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Student", Storage="_Class", ThisKey="idClass", OtherKey="idClass", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._idClass = value.idClass;
					}
					else
					{
						this._idClass = default(int);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Student", Storage="_Course", ThisKey="idCourse", OtherKey="idCourse", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._idCourse = value.idCourse;
					}
					else
					{
						this._idCourse = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Falcuty_Student", Storage="_Falcuty", ThisKey="idFalcuty", OtherKey="idFalcuty", IsForeignKey=true)]
		public Falcuty Falcuty
		{
			get
			{
				return this._Falcuty.Entity;
			}
			set
			{
				Falcuty previousValue = this._Falcuty.Entity;
				if (((previousValue != value) 
							|| (this._Falcuty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Falcuty.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Falcuty.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._idFalcuty = value.idFalcuty;
					}
					else
					{
						this._idFalcuty = default(int);
					}
					this.SendPropertyChanged("Falcuty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_EventStudentLists(EventStudentList entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_EventStudentLists(EventStudentList entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idClass;
		
		private string _name;
		
		private System.Nullable<int> _idfalcuty;
		
		private System.Nullable<int> _idCourse;
		
		private EntitySet<Student> _Students;
		
		private EntitySet<Event> _Events;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Falcuty> _Falcuty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidClassChanging(int value);
    partial void OnidClassChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnidfalcutyChanging(System.Nullable<int> value);
    partial void OnidfalcutyChanged();
    partial void OnidCourseChanging(System.Nullable<int> value);
    partial void OnidCourseChanged();
    #endregion
		
		public Class()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Course = default(EntityRef<Course>);
			this._Falcuty = default(EntityRef<Falcuty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClass", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idClass
		{
			get
			{
				return this._idClass;
			}
			set
			{
				if ((this._idClass != value))
				{
					this.OnidClassChanging(value);
					this.SendPropertyChanging();
					this._idClass = value;
					this.SendPropertyChanged("idClass");
					this.OnidClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idfalcuty", DbType="Int")]
		public System.Nullable<int> idfalcuty
		{
			get
			{
				return this._idfalcuty;
			}
			set
			{
				if ((this._idfalcuty != value))
				{
					if (this._Falcuty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidfalcutyChanging(value);
					this.SendPropertyChanging();
					this._idfalcuty = value;
					this.SendPropertyChanged("idfalcuty");
					this.OnidfalcutyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCourse", DbType="Int")]
		public System.Nullable<int> idCourse
		{
			get
			{
				return this._idCourse;
			}
			set
			{
				if ((this._idCourse != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidCourseChanging(value);
					this.SendPropertyChanging();
					this._idCourse = value;
					this.SendPropertyChanged("idCourse");
					this.OnidCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Student", Storage="_Students", ThisKey="idClass", OtherKey="idClass")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Event", Storage="_Events", ThisKey="idClass", OtherKey="idClass")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Class", Storage="_Course", ThisKey="idCourse", OtherKey="idCourse", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._idCourse = value.idCourse;
					}
					else
					{
						this._idCourse = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Falcuty_Class", Storage="_Falcuty", ThisKey="idfalcuty", OtherKey="idFalcuty", IsForeignKey=true)]
		public Falcuty Falcuty
		{
			get
			{
				return this._Falcuty.Entity;
			}
			set
			{
				Falcuty previousValue = this._Falcuty.Entity;
				if (((previousValue != value) 
							|| (this._Falcuty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Falcuty.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Falcuty.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._idfalcuty = value.idFalcuty;
					}
					else
					{
						this._idfalcuty = default(Nullable<int>);
					}
					this.SendPropertyChanged("Falcuty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCourse;
		
		private System.Nullable<int> _YearStart;
		
		private System.Nullable<int> _YearEnd;
		
		private EntitySet<Student> _Students;
		
		private EntitySet<Class> _Classes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCourseChanging(int value);
    partial void OnidCourseChanged();
    partial void OnYearStartChanging(System.Nullable<int> value);
    partial void OnYearStartChanged();
    partial void OnYearEndChanging(System.Nullable<int> value);
    partial void OnYearEndChanged();
    #endregion
		
		public Course()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCourse", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idCourse
		{
			get
			{
				return this._idCourse;
			}
			set
			{
				if ((this._idCourse != value))
				{
					this.OnidCourseChanging(value);
					this.SendPropertyChanging();
					this._idCourse = value;
					this.SendPropertyChanged("idCourse");
					this.OnidCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearStart", DbType="Int")]
		public System.Nullable<int> YearStart
		{
			get
			{
				return this._YearStart;
			}
			set
			{
				if ((this._YearStart != value))
				{
					this.OnYearStartChanging(value);
					this.SendPropertyChanging();
					this._YearStart = value;
					this.SendPropertyChanged("YearStart");
					this.OnYearStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearEnd", DbType="Int")]
		public System.Nullable<int> YearEnd
		{
			get
			{
				return this._YearEnd;
			}
			set
			{
				if ((this._YearEnd != value))
				{
					this.OnYearEndChanging(value);
					this.SendPropertyChanging();
					this._YearEnd = value;
					this.SendPropertyChanged("YearEnd");
					this.OnYearEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Student", Storage="_Students", ThisKey="idCourse", OtherKey="idCourse")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Class", Storage="_Classes", ThisKey="idCourse", OtherKey="idCourse")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idEvent;
		
		private string _eventName;
		
		private string _content;
		
		private System.DateTime _dateRegister;
		
		private System.DateTime _dateEndRegister;
		
		private System.DateTime _dateStart;
		
		private System.DateTime _dateEnd;
		
		private System.Nullable<int> _idEventType;
		
		private System.Nullable<int> _idOganizer;
		
		private System.Nullable<int> _idSemester;
		
		private System.Nullable<int> _idFalcuty;
		
		private System.Nullable<int> _idClass;
		
		private System.Nullable<int> _studentNumber;
		
		private System.Nullable<int> _Registation;
		
		private System.Nullable<int> _Attendant;
		
		private string _address;
		
		private System.Nullable<bool> _status;
		
		private EntitySet<EventStudentList> _EventStudentLists;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<EventType> _EventType;
		
		private EntityRef<Falcuty> _Falcuty;
		
		private EntityRef<Oganizer> _Oganizer;
		
		private EntityRef<Semester> _Semester;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEventChanging(int value);
    partial void OnidEventChanged();
    partial void OneventNameChanging(string value);
    partial void OneventNameChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void OndateRegisterChanging(System.DateTime value);
    partial void OndateRegisterChanged();
    partial void OndateEndRegisterChanging(System.DateTime value);
    partial void OndateEndRegisterChanged();
    partial void OndateStartChanging(System.DateTime value);
    partial void OndateStartChanged();
    partial void OndateEndChanging(System.DateTime value);
    partial void OndateEndChanged();
    partial void OnidEventTypeChanging(System.Nullable<int> value);
    partial void OnidEventTypeChanged();
    partial void OnidOganizerChanging(System.Nullable<int> value);
    partial void OnidOganizerChanged();
    partial void OnidSemesterChanging(System.Nullable<int> value);
    partial void OnidSemesterChanged();
    partial void OnidFalcutyChanging(System.Nullable<int> value);
    partial void OnidFalcutyChanged();
    partial void OnidClassChanging(System.Nullable<int> value);
    partial void OnidClassChanged();
    partial void OnstudentNumberChanging(System.Nullable<int> value);
    partial void OnstudentNumberChanged();
    partial void OnRegistationChanging(System.Nullable<int> value);
    partial void OnRegistationChanged();
    partial void OnAttendantChanging(System.Nullable<int> value);
    partial void OnAttendantChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnstatusChanging(System.Nullable<bool> value);
    partial void OnstatusChanged();
    #endregion
		
		public Event()
		{
			this._EventStudentLists = new EntitySet<EventStudentList>(new Action<EventStudentList>(this.attach_EventStudentLists), new Action<EventStudentList>(this.detach_EventStudentLists));
			this._Class = default(EntityRef<Class>);
			this._EventType = default(EntityRef<EventType>);
			this._Falcuty = default(EntityRef<Falcuty>);
			this._Oganizer = default(EntityRef<Oganizer>);
			this._Semester = default(EntityRef<Semester>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEvent", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idEvent
		{
			get
			{
				return this._idEvent;
			}
			set
			{
				if ((this._idEvent != value))
				{
					this.OnidEventChanging(value);
					this.SendPropertyChanging();
					this._idEvent = value;
					this.SendPropertyChanged("idEvent");
					this.OnidEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string eventName
		{
			get
			{
				return this._eventName;
			}
			set
			{
				if ((this._eventName != value))
				{
					this.OneventNameChanging(value);
					this.SendPropertyChanging();
					this._eventName = value;
					this.SendPropertyChanged("eventName");
					this.OneventNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateRegister", DbType="Date NOT NULL")]
		public System.DateTime dateRegister
		{
			get
			{
				return this._dateRegister;
			}
			set
			{
				if ((this._dateRegister != value))
				{
					this.OndateRegisterChanging(value);
					this.SendPropertyChanging();
					this._dateRegister = value;
					this.SendPropertyChanged("dateRegister");
					this.OndateRegisterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateEndRegister", DbType="Date NOT NULL")]
		public System.DateTime dateEndRegister
		{
			get
			{
				return this._dateEndRegister;
			}
			set
			{
				if ((this._dateEndRegister != value))
				{
					this.OndateEndRegisterChanging(value);
					this.SendPropertyChanging();
					this._dateEndRegister = value;
					this.SendPropertyChanged("dateEndRegister");
					this.OndateEndRegisterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateStart", DbType="Date NOT NULL")]
		public System.DateTime dateStart
		{
			get
			{
				return this._dateStart;
			}
			set
			{
				if ((this._dateStart != value))
				{
					this.OndateStartChanging(value);
					this.SendPropertyChanging();
					this._dateStart = value;
					this.SendPropertyChanged("dateStart");
					this.OndateStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateEnd", DbType="Date NOT NULL")]
		public System.DateTime dateEnd
		{
			get
			{
				return this._dateEnd;
			}
			set
			{
				if ((this._dateEnd != value))
				{
					this.OndateEndChanging(value);
					this.SendPropertyChanging();
					this._dateEnd = value;
					this.SendPropertyChanged("dateEnd");
					this.OndateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEventType", DbType="Int")]
		public System.Nullable<int> idEventType
		{
			get
			{
				return this._idEventType;
			}
			set
			{
				if ((this._idEventType != value))
				{
					if (this._EventType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEventTypeChanging(value);
					this.SendPropertyChanging();
					this._idEventType = value;
					this.SendPropertyChanged("idEventType");
					this.OnidEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOganizer", DbType="Int")]
		public System.Nullable<int> idOganizer
		{
			get
			{
				return this._idOganizer;
			}
			set
			{
				if ((this._idOganizer != value))
				{
					if (this._Oganizer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidOganizerChanging(value);
					this.SendPropertyChanging();
					this._idOganizer = value;
					this.SendPropertyChanged("idOganizer");
					this.OnidOganizerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSemester", DbType="Int")]
		public System.Nullable<int> idSemester
		{
			get
			{
				return this._idSemester;
			}
			set
			{
				if ((this._idSemester != value))
				{
					if (this._Semester.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidSemesterChanging(value);
					this.SendPropertyChanging();
					this._idSemester = value;
					this.SendPropertyChanged("idSemester");
					this.OnidSemesterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFalcuty", DbType="Int")]
		public System.Nullable<int> idFalcuty
		{
			get
			{
				return this._idFalcuty;
			}
			set
			{
				if ((this._idFalcuty != value))
				{
					if (this._Falcuty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidFalcutyChanging(value);
					this.SendPropertyChanging();
					this._idFalcuty = value;
					this.SendPropertyChanged("idFalcuty");
					this.OnidFalcutyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClass", DbType="Int")]
		public System.Nullable<int> idClass
		{
			get
			{
				return this._idClass;
			}
			set
			{
				if ((this._idClass != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidClassChanging(value);
					this.SendPropertyChanging();
					this._idClass = value;
					this.SendPropertyChanged("idClass");
					this.OnidClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentNumber", DbType="Int")]
		public System.Nullable<int> studentNumber
		{
			get
			{
				return this._studentNumber;
			}
			set
			{
				if ((this._studentNumber != value))
				{
					this.OnstudentNumberChanging(value);
					this.SendPropertyChanging();
					this._studentNumber = value;
					this.SendPropertyChanged("studentNumber");
					this.OnstudentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Registation", DbType="Int")]
		public System.Nullable<int> Registation
		{
			get
			{
				return this._Registation;
			}
			set
			{
				if ((this._Registation != value))
				{
					this.OnRegistationChanging(value);
					this.SendPropertyChanging();
					this._Registation = value;
					this.SendPropertyChanged("Registation");
					this.OnRegistationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attendant", DbType="Int")]
		public System.Nullable<int> Attendant
		{
			get
			{
				return this._Attendant;
			}
			set
			{
				if ((this._Attendant != value))
				{
					this.OnAttendantChanging(value);
					this.SendPropertyChanging();
					this._Attendant = value;
					this.SendPropertyChanged("Attendant");
					this.OnAttendantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit")]
		public System.Nullable<bool> status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventStudentList", Storage="_EventStudentLists", ThisKey="idEvent", OtherKey="idEvent")]
		public EntitySet<EventStudentList> EventStudentLists
		{
			get
			{
				return this._EventStudentLists;
			}
			set
			{
				this._EventStudentLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Event", Storage="_Class", ThisKey="idClass", OtherKey="idClass", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._idClass = value.idClass;
					}
					else
					{
						this._idClass = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Event", Storage="_EventType", ThisKey="idEventType", OtherKey="idEventType", IsForeignKey=true)]
		public EventType EventType
		{
			get
			{
				return this._EventType.Entity;
			}
			set
			{
				EventType previousValue = this._EventType.Entity;
				if (((previousValue != value) 
							|| (this._EventType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventType.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._EventType.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._idEventType = value.idEventType;
					}
					else
					{
						this._idEventType = default(Nullable<int>);
					}
					this.SendPropertyChanged("EventType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Falcuty_Event", Storage="_Falcuty", ThisKey="idFalcuty", OtherKey="idFalcuty", IsForeignKey=true)]
		public Falcuty Falcuty
		{
			get
			{
				return this._Falcuty.Entity;
			}
			set
			{
				Falcuty previousValue = this._Falcuty.Entity;
				if (((previousValue != value) 
							|| (this._Falcuty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Falcuty.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Falcuty.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._idFalcuty = value.idFalcuty;
					}
					else
					{
						this._idFalcuty = default(Nullable<int>);
					}
					this.SendPropertyChanged("Falcuty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Oganizer_Event", Storage="_Oganizer", ThisKey="idOganizer", OtherKey="idOganizer", IsForeignKey=true)]
		public Oganizer Oganizer
		{
			get
			{
				return this._Oganizer.Entity;
			}
			set
			{
				Oganizer previousValue = this._Oganizer.Entity;
				if (((previousValue != value) 
							|| (this._Oganizer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Oganizer.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Oganizer.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._idOganizer = value.idOganizer;
					}
					else
					{
						this._idOganizer = default(Nullable<int>);
					}
					this.SendPropertyChanged("Oganizer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Event", Storage="_Semester", ThisKey="idSemester", OtherKey="idSemester", IsForeignKey=true)]
		public Semester Semester
		{
			get
			{
				return this._Semester.Entity;
			}
			set
			{
				Semester previousValue = this._Semester.Entity;
				if (((previousValue != value) 
							|| (this._Semester.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Semester.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Semester.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._idSemester = value.idSemester;
					}
					else
					{
						this._idSemester = default(Nullable<int>);
					}
					this.SendPropertyChanged("Semester");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventStudentLists(EventStudentList entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventStudentLists(EventStudentList entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventStudentList")]
	public partial class EventStudentList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idEvent;
		
		private string _idStudent;
		
		private System.Nullable<bool> _ClassConfirmed;
		
		private System.Nullable<bool> _FalcutyConfirmed;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidEventChanging(int value);
    partial void OnidEventChanged();
    partial void OnidStudentChanging(string value);
    partial void OnidStudentChanged();
    partial void OnClassConfirmedChanging(System.Nullable<bool> value);
    partial void OnClassConfirmedChanged();
    partial void OnFalcutyConfirmedChanging(System.Nullable<bool> value);
    partial void OnFalcutyConfirmedChanged();
    #endregion
		
		public EventStudentList()
		{
			this._Event = default(EntityRef<Event>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEvent", DbType="Int NOT NULL")]
		public int idEvent
		{
			get
			{
				return this._idEvent;
			}
			set
			{
				if ((this._idEvent != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEventChanging(value);
					this.SendPropertyChanging();
					this._idEvent = value;
					this.SendPropertyChanged("idEvent");
					this.OnidEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStudent", DbType="NVarChar(11) NOT NULL", CanBeNull=false)]
		public string idStudent
		{
			get
			{
				return this._idStudent;
			}
			set
			{
				if ((this._idStudent != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidStudentChanging(value);
					this.SendPropertyChanging();
					this._idStudent = value;
					this.SendPropertyChanged("idStudent");
					this.OnidStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassConfirmed", DbType="Bit")]
		public System.Nullable<bool> ClassConfirmed
		{
			get
			{
				return this._ClassConfirmed;
			}
			set
			{
				if ((this._ClassConfirmed != value))
				{
					this.OnClassConfirmedChanging(value);
					this.SendPropertyChanging();
					this._ClassConfirmed = value;
					this.SendPropertyChanged("ClassConfirmed");
					this.OnClassConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FalcutyConfirmed", DbType="Bit")]
		public System.Nullable<bool> FalcutyConfirmed
		{
			get
			{
				return this._FalcutyConfirmed;
			}
			set
			{
				if ((this._FalcutyConfirmed != value))
				{
					this.OnFalcutyConfirmedChanging(value);
					this.SendPropertyChanging();
					this._FalcutyConfirmed = value;
					this.SendPropertyChanged("FalcutyConfirmed");
					this.OnFalcutyConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventStudentList", Storage="_Event", ThisKey="idEvent", OtherKey="idEvent", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventStudentLists.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventStudentLists.Add(this);
						this._idEvent = value.idEvent;
					}
					else
					{
						this._idEvent = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_EventStudentList", Storage="_Student", ThisKey="idStudent", OtherKey="idStudent", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.EventStudentLists.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.EventStudentLists.Add(this);
						this._idStudent = value.idStudent;
					}
					else
					{
						this._idStudent = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventType")]
	public partial class EventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idEventType;
		
		private string _typename;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEventTypeChanging(int value);
    partial void OnidEventTypeChanged();
    partial void OntypenameChanging(string value);
    partial void OntypenameChanged();
    #endregion
		
		public EventType()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEventType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idEventType
		{
			get
			{
				return this._idEventType;
			}
			set
			{
				if ((this._idEventType != value))
				{
					this.OnidEventTypeChanging(value);
					this.SendPropertyChanging();
					this._idEventType = value;
					this.SendPropertyChanged("idEventType");
					this.OnidEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typename", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string typename
		{
			get
			{
				return this._typename;
			}
			set
			{
				if ((this._typename != value))
				{
					this.OntypenameChanging(value);
					this.SendPropertyChanging();
					this._typename = value;
					this.SendPropertyChanged("typename");
					this.OntypenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Event", Storage="_Events", ThisKey="idEventType", OtherKey="idEventType")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventType = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Falcuty")]
	public partial class Falcuty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idFalcuty;
		
		private string _name;
		
		private EntitySet<Student> _Students;
		
		private EntitySet<Class> _Classes;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidFalcutyChanging(int value);
    partial void OnidFalcutyChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Falcuty()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFalcuty", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idFalcuty
		{
			get
			{
				return this._idFalcuty;
			}
			set
			{
				if ((this._idFalcuty != value))
				{
					this.OnidFalcutyChanging(value);
					this.SendPropertyChanging();
					this._idFalcuty = value;
					this.SendPropertyChanged("idFalcuty");
					this.OnidFalcutyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Falcuty_Student", Storage="_Students", ThisKey="idFalcuty", OtherKey="idFalcuty")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Falcuty_Class", Storage="_Classes", ThisKey="idFalcuty", OtherKey="idfalcuty")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Falcuty_Event", Storage="_Events", ThisKey="idFalcuty", OtherKey="idFalcuty")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Falcuty_Staff", Storage="_Staffs", ThisKey="idFalcuty", OtherKey="idFalcuty")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Falcuty = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Falcuty = null;
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Falcuty = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Falcuty = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Falcuty = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Falcuty = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Falcuty = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Falcuty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Oganizer")]
	public partial class Oganizer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idOganizer;
		
		private string _name;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidOganizerChanging(int value);
    partial void OnidOganizerChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Oganizer()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOganizer", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idOganizer
		{
			get
			{
				return this._idOganizer;
			}
			set
			{
				if ((this._idOganizer != value))
				{
					this.OnidOganizerChanging(value);
					this.SendPropertyChanging();
					this._idOganizer = value;
					this.SendPropertyChanged("idOganizer");
					this.OnidOganizerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Oganizer_Event", Storage="_Events", ThisKey="idOganizer", OtherKey="idOganizer")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Oganizer = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Oganizer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idPermission;
		
		private string _name;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<Staff> _Staffs;
		
		private EntitySet<StaffAccount> _StaffAccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPermissionChanging(int value);
    partial void OnidPermissionChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Permission()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			this._StaffAccounts = new EntitySet<StaffAccount>(new Action<StaffAccount>(this.attach_StaffAccounts), new Action<StaffAccount>(this.detach_StaffAccounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPermission", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idPermission
		{
			get
			{
				return this._idPermission;
			}
			set
			{
				if ((this._idPermission != value))
				{
					this.OnidPermissionChanging(value);
					this.SendPropertyChanging();
					this._idPermission = value;
					this.SendPropertyChanged("idPermission");
					this.OnidPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_Account", Storage="_Accounts", ThisKey="idPermission", OtherKey="idPermission")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_Staff", Storage="_Staffs", ThisKey="idPermission", OtherKey="idPermission")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_StaffAccount", Storage="_StaffAccounts", ThisKey="idPermission", OtherKey="idPermission")]
		public EntitySet<StaffAccount> StaffAccounts
		{
			get
			{
				return this._StaffAccounts;
			}
			set
			{
				this._StaffAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
		
		private void attach_StaffAccounts(StaffAccount entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_StaffAccounts(StaffAccount entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Semester")]
	public partial class Semester : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idSemester;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _dateStart;
		
		private System.Nullable<System.DateTime> _dateEnd;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidSemesterChanging(int value);
    partial void OnidSemesterChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndateStartChanging(System.Nullable<System.DateTime> value);
    partial void OndateStartChanged();
    partial void OndateEndChanging(System.Nullable<System.DateTime> value);
    partial void OndateEndChanged();
    #endregion
		
		public Semester()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSemester", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idSemester
		{
			get
			{
				return this._idSemester;
			}
			set
			{
				if ((this._idSemester != value))
				{
					this.OnidSemesterChanging(value);
					this.SendPropertyChanging();
					this._idSemester = value;
					this.SendPropertyChanged("idSemester");
					this.OnidSemesterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateStart", DbType="Date")]
		public System.Nullable<System.DateTime> dateStart
		{
			get
			{
				return this._dateStart;
			}
			set
			{
				if ((this._dateStart != value))
				{
					this.OndateStartChanging(value);
					this.SendPropertyChanging();
					this._dateStart = value;
					this.SendPropertyChanged("dateStart");
					this.OndateStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateEnd", DbType="Date")]
		public System.Nullable<System.DateTime> dateEnd
		{
			get
			{
				return this._dateEnd;
			}
			set
			{
				if ((this._dateEnd != value))
				{
					this.OndateEndChanging(value);
					this.SendPropertyChanging();
					this._dateEnd = value;
					this.SendPropertyChanged("dateEnd");
					this.OndateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Event", Storage="_Events", ThisKey="idSemester", OtherKey="idSemester")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Semester = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Semester = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idStaff;
		
		private string _name;
		
		private System.Data.Linq.Binary _picture;
		
		private System.Nullable<System.DateTime> _dob;
		
		private string _andress;
		
		private string _phone;
		
		private System.Nullable<int> _idPermission;
		
		private System.Nullable<int> _idFalcuty;
		
		private EntitySet<StaffAccount> _StaffAccounts;
		
		private EntityRef<Falcuty> _Falcuty;
		
		private EntityRef<Permission> _Permission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidStaffChanging(int value);
    partial void OnidStaffChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpictureChanging(System.Data.Linq.Binary value);
    partial void OnpictureChanged();
    partial void OndobChanging(System.Nullable<System.DateTime> value);
    partial void OndobChanged();
    partial void OnandressChanging(string value);
    partial void OnandressChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnidPermissionChanging(System.Nullable<int> value);
    partial void OnidPermissionChanged();
    partial void OnidFalcutyChanging(System.Nullable<int> value);
    partial void OnidFalcutyChanged();
    #endregion
		
		public Staff()
		{
			this._StaffAccounts = new EntitySet<StaffAccount>(new Action<StaffAccount>(this.attach_StaffAccounts), new Action<StaffAccount>(this.detach_StaffAccounts));
			this._Falcuty = default(EntityRef<Falcuty>);
			this._Permission = default(EntityRef<Permission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStaff", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idStaff
		{
			get
			{
				return this._idStaff;
			}
			set
			{
				if ((this._idStaff != value))
				{
					this.OnidStaffChanging(value);
					this.SendPropertyChanging();
					this._idStaff = value;
					this.SendPropertyChanged("idStaff");
					this.OnidStaffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_picture", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary picture
		{
			get
			{
				return this._picture;
			}
			set
			{
				if ((this._picture != value))
				{
					this.OnpictureChanging(value);
					this.SendPropertyChanging();
					this._picture = value;
					this.SendPropertyChanged("picture");
					this.OnpictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dob", DbType="DateTime")]
		public System.Nullable<System.DateTime> dob
		{
			get
			{
				return this._dob;
			}
			set
			{
				if ((this._dob != value))
				{
					this.OndobChanging(value);
					this.SendPropertyChanging();
					this._dob = value;
					this.SendPropertyChanged("dob");
					this.OndobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_andress", DbType="NVarChar(100)")]
		public string andress
		{
			get
			{
				return this._andress;
			}
			set
			{
				if ((this._andress != value))
				{
					this.OnandressChanging(value);
					this.SendPropertyChanging();
					this._andress = value;
					this.SendPropertyChanged("andress");
					this.OnandressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NVarChar(20)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPermission", DbType="Int")]
		public System.Nullable<int> idPermission
		{
			get
			{
				return this._idPermission;
			}
			set
			{
				if ((this._idPermission != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPermissionChanging(value);
					this.SendPropertyChanging();
					this._idPermission = value;
					this.SendPropertyChanged("idPermission");
					this.OnidPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFalcuty", DbType="Int")]
		public System.Nullable<int> idFalcuty
		{
			get
			{
				return this._idFalcuty;
			}
			set
			{
				if ((this._idFalcuty != value))
				{
					if (this._Falcuty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidFalcutyChanging(value);
					this.SendPropertyChanging();
					this._idFalcuty = value;
					this.SendPropertyChanged("idFalcuty");
					this.OnidFalcutyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_StaffAccount", Storage="_StaffAccounts", ThisKey="idStaff", OtherKey="idStaff")]
		public EntitySet<StaffAccount> StaffAccounts
		{
			get
			{
				return this._StaffAccounts;
			}
			set
			{
				this._StaffAccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Falcuty_Staff", Storage="_Falcuty", ThisKey="idFalcuty", OtherKey="idFalcuty", IsForeignKey=true)]
		public Falcuty Falcuty
		{
			get
			{
				return this._Falcuty.Entity;
			}
			set
			{
				Falcuty previousValue = this._Falcuty.Entity;
				if (((previousValue != value) 
							|| (this._Falcuty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Falcuty.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Falcuty.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._idFalcuty = value.idFalcuty;
					}
					else
					{
						this._idFalcuty = default(Nullable<int>);
					}
					this.SendPropertyChanged("Falcuty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_Staff", Storage="_Permission", ThisKey="idPermission", OtherKey="idPermission", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._idPermission = value.idPermission;
					}
					else
					{
						this._idPermission = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StaffAccounts(StaffAccount entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_StaffAccounts(StaffAccount entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffAccount")]
	public partial class StaffAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _userName;
		
		private string _displayName;
		
		private string _passWord;
		
		private System.Nullable<int> _idPermission;
		
		private System.Nullable<int> _idStaff;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OndisplayNameChanging(string value);
    partial void OndisplayNameChanged();
    partial void OnpassWordChanging(string value);
    partial void OnpassWordChanged();
    partial void OnidPermissionChanging(System.Nullable<int> value);
    partial void OnidPermissionChanged();
    partial void OnidStaffChanging(System.Nullable<int> value);
    partial void OnidStaffChanged();
    #endregion
		
		public StaffAccount()
		{
			this._Permission = default(EntityRef<Permission>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(20)")]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_displayName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string displayName
		{
			get
			{
				return this._displayName;
			}
			set
			{
				if ((this._displayName != value))
				{
					this.OndisplayNameChanging(value);
					this.SendPropertyChanging();
					this._displayName = value;
					this.SendPropertyChanged("displayName");
					this.OndisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passWord", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string passWord
		{
			get
			{
				return this._passWord;
			}
			set
			{
				if ((this._passWord != value))
				{
					this.OnpassWordChanging(value);
					this.SendPropertyChanging();
					this._passWord = value;
					this.SendPropertyChanged("passWord");
					this.OnpassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPermission", DbType="Int")]
		public System.Nullable<int> idPermission
		{
			get
			{
				return this._idPermission;
			}
			set
			{
				if ((this._idPermission != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPermissionChanging(value);
					this.SendPropertyChanging();
					this._idPermission = value;
					this.SendPropertyChanged("idPermission");
					this.OnidPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStaff", DbType="Int")]
		public System.Nullable<int> idStaff
		{
			get
			{
				return this._idStaff;
			}
			set
			{
				if ((this._idStaff != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidStaffChanging(value);
					this.SendPropertyChanging();
					this._idStaff = value;
					this.SendPropertyChanged("idStaff");
					this.OnidStaffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_StaffAccount", Storage="_Permission", ThisKey="idPermission", OtherKey="idPermission", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.StaffAccounts.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.StaffAccounts.Add(this);
						this._idPermission = value.idPermission;
					}
					else
					{
						this._idPermission = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_StaffAccount", Storage="_Staff", ThisKey="idStaff", OtherKey="idStaff", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.StaffAccounts.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.StaffAccounts.Add(this);
						this._idStaff = value.idStaff;
					}
					else
					{
						this._idStaff = default(Nullable<int>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
